<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2" x:Class="GhurundEditor.App"
	xmlns:local="clr-namespace:Ghurund.Controls"
	xmlns:system="clr-namespace:System;assembly=mscorlib">

	<Thickness x:Key="Ghurund.Static.BorderThickness">1</Thickness>

	<Thickness x:Key="Ghurund.Padding.Small">0</Thickness>
	<Thickness x:Key="Ghurund.Padding">2</Thickness>

	<system:Double x:Key="Ghurund.IconSize.Small">18</system:Double>
	<system:Double x:Key="Ghurund.IconSize.Large">22</system:Double>

	<Style x:Key="IconButton_Small" TargetType="{x:Type local:IconButton}" BasedOn="{StaticResource ResourceKey={x:Type local:IconButton}}">
		<Setter Property="Foreground" Value="{DynamicResource Ghurund.Icon}"/>
		<Setter Property="Width" Value="{DynamicResource Ghurund.IconSize.Small}"/>
		<Setter Property="Height" Value="{DynamicResource Ghurund.IconSize.Small}"/>
		<Setter Property="Padding" Value="{DynamicResource Ghurund.Padding.Small}"/>
		<Setter Property="SnapsToDevicePixels" Value="True"/>
	</Style>

	<Style x:Key="IconButton_Large" TargetType="{x:Type local:IconButton}" BasedOn="{StaticResource ResourceKey={x:Type local:IconButton}}">
		<Setter Property="Foreground" Value="{DynamicResource Ghurund.Icon}"/>
		<Setter Property="Width" Value="{DynamicResource Ghurund.IconSize.Large}"/>
		<Setter Property="Height" Value="{DynamicResource Ghurund.IconSize.Large}"/>
		<Setter Property="Padding" Value="{DynamicResource Ghurund.Padding}"/>
		<Setter Property="SnapsToDevicePixels" Value="True"/>
	</Style>

	<Style x:Key="IconRadioButton_Small" TargetType="{x:Type local:IconRadioButton}" BasedOn="{StaticResource ResourceKey={x:Type local:IconRadioButton}}">
		<Setter Property="Foreground" Value="{DynamicResource Ghurund.Icon}"/>
		<Setter Property="Width" Value="{DynamicResource Ghurund.IconSize.Small}"/>
		<Setter Property="Height" Value="{DynamicResource Ghurund.IconSize.Small}"/>
		<Setter Property="Padding" Value="{DynamicResource Ghurund.Padding.Small}"/>
		<Setter Property="SnapsToDevicePixels" Value="True"/>
	</Style>

	<Style x:Key="IconRadioButton_Large" TargetType="{x:Type local:IconRadioButton}" BasedOn="{StaticResource ResourceKey={x:Type local:IconRadioButton}}">
		<Setter Property="Foreground" Value="{DynamicResource Ghurund.Icon}"/>
		<Setter Property="Width" Value="{DynamicResource Ghurund.IconSize.Large}"/>
		<Setter Property="Height" Value="{DynamicResource Ghurund.IconSize.Large}"/>
		<Setter Property="Padding" Value="{DynamicResource Ghurund.Padding}"/>
		<Setter Property="SnapsToDevicePixels" Value="True"/>
	</Style>

	<Style x:Key="IconCheckBox_Small" TargetType="{x:Type local:IconCheckBox}" BasedOn="{StaticResource ResourceKey={x:Type local:IconCheckBox}}">
		<Setter Property="Foreground" Value="{DynamicResource Ghurund.Icon}"/>
		<Setter Property="Width" Value="{DynamicResource Ghurund.IconSize.Small}"/>
		<Setter Property="Height" Value="{DynamicResource Ghurund.IconSize.Small}"/>
		<Setter Property="Padding" Value="{DynamicResource Ghurund.Padding.Small}"/>
		<Setter Property="SnapsToDevicePixels" Value="True"/>
	</Style>

	<Style x:Key="IconCheckBox_Large" TargetType="{x:Type local:IconCheckBox}" BasedOn="{StaticResource ResourceKey={x:Type local:IconCheckBox}}">
		<Setter Property="Foreground" Value="{DynamicResource Ghurund.Icon}"/>
		<Setter Property="Width" Value="{DynamicResource Ghurund.IconSize.Large}"/>
		<Setter Property="Height" Value="{DynamicResource Ghurund.IconSize.Large}"/>
		<Setter Property="Padding" Value="{DynamicResource Ghurund.Padding}"/>
		<Setter Property="SnapsToDevicePixels" Value="True"/>
	</Style>

	<Style x:Key="Ghurund.ListBoxItemStyle" TargetType="{x:Type ListBoxItem}">
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="Margin" Value="0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBoxItem}">
					<Border SnapsToDevicePixels="True" BorderThickness="{TemplateBinding BorderThickness}"
							BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
						<ContentPresenter/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="BorderBrush" Value="{DynamicResource Ghurund.Accent}" />
							<Setter Property="Background" Value="{DynamicResource Ghurund.Highlight}" />
						</Trigger>
						<Trigger Property="IsSelected" Value="True">
							<Setter Property="BorderBrush" Value="{DynamicResource Ghurund.Accent}" />
							<Setter Property="Background" Value="{DynamicResource Ghurund.Selection}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Foreground" Value="{DynamicResource Ghurund.Text.Disabled}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
		<Setter Property="OverridesDefaultStyle" Value="true"/>
		<Setter Property="IsTabStop" Value="false"/>
		<Setter Property="Focusable" Value="false"/>
		<Setter Property="ClickMode" Value="Press"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border
						x:Name="templateRoot" SnapsToDevicePixels="true"
						Background="{DynamicResource Ghurund.Background}"
						BorderThickness="{TemplateBinding BorderThickness}"
						BorderBrush="{TemplateBinding BorderBrush}">
						<Border x:Name="splitBorder" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" SnapsToDevicePixels="true" Margin="0" HorizontalAlignment="Right" BorderThickness="1" BorderBrush="Transparent">
							<Path x:Name="arrow" VerticalAlignment="Center" Margin="0" HorizontalAlignment="Center" Fill="{DynamicResource Ghurund.Icon}" Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z"/>
						</Border>
					</Border>
					<ControlTemplate.Triggers>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource Ghurund.Selection}"/>
							<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource Ghurund.Accent}"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource Ghurund.Highlight}"/>
							<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource Ghurund.Accent}"/>
						</MultiDataTrigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Fill" TargetName="arrow" Value="{DynamicResource Ghurund.Icon.Disabled}"/>
						</Trigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource Ghurund.Background}"/>
						</MultiDataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
		<Grid x:Name="templateRoot" SnapsToDevicePixels="true">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*"/>
				<ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
			</Grid.ColumnDefinitions>
			<Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
				<Themes:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
					<Border x:Name="dropDownBorder" BorderBrush="{DynamicResource Ghurund.Border}" BorderThickness="1" Background="{DynamicResource Ghurund.BackgroundLight}">
						<ScrollViewer x:Name="DropDownScrollViewer">
							<Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
								<Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
									<Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
								</Canvas>
								<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
							</Grid>
						</ScrollViewer>
					</Border>
				</Themes:SystemDropShadowChrome>
			</Popup>
			<ToggleButton
						x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						Background="{TemplateBinding Background}"
						Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
						Style="{StaticResource ComboBoxToggleButton}"/>
			<ContentPresenter
				x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
				ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
				Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
				HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false"
				Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
				VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
				<Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
				<Setter Property="Color" TargetName="shadow" Value="#71000000"/>
			</Trigger>
			<Trigger Property="HasItems" Value="false">
				<Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsGrouping" Value="true"/>
					<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
				</MultiTrigger.Conditions>
				<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
			</MultiTrigger>
			<Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
				<Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
				<Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<Style TargetType="{x:Type ComboBox}">
		<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
		<Setter Property="Background" Value="{DynamicResource Ghurund.BackgroundLight}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource Ghurund.Border}"/>
		<Setter Property="Foreground" Value="{DynamicResource Ghurund.Text.Primary}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
		<Setter Property="Padding" Value="6,3,5,3"/>
		<Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
		<Setter Property="ScrollViewer.PanningMode" Value="Both"/>
		<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
		<Setter Property="Template" Value="{StaticResource ComboBoxTemplate}"/>
	</Style>

</ResourceDictionary>
